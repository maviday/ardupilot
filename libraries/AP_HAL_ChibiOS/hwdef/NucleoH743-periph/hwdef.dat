# hw definition file for processing by chibios_hwdef.py


# MCU class and specific type
MCU STM32H7xx STM32H743xx

# crystal frequency
OSCILLATOR_HZ 8000000

# board ID for firmware load
APJ_BOARD_ID 139


FLASH_SIZE_KB 2048

# with 2M flash we can afford to optimize for speed
env OPTIMIZE -O2

FLASH_RESERVE_START_KB 128

define HAL_STORAGE_SIZE 16384
STM32_ST_USE_TIMER 12
define CH_CFG_ST_RESOLUTION 16
# use last 2 pages for flash storage
# H743 has 16 pages of 128k each
define STORAGE_FLASH_PAGE 14


# order of UARTs (and USB)
SERIAL_ORDER OTG1 USART2



# setup build for a peripheral firmware
env AP_PERIPH 1

define PERIPH_FW TRUE

define HAL_BUILD_AP_PERIPH

define HAL_PERIPH_ENABLE_BATTERY
define HAL_PERIPH_ENABLE_RC_OUT
define HAL_PERIPH_ENABLE_NOTIFY
define HAL_PERIPH_ENABLE_AP_ESC


# use the app descriptor needed by MissionPlanner for CAN upload
env APP_DESCRIPTOR MissionPlanner

define HAL_USE_ADC TRUE
define STM32_ADC_USE_ADC1 TRUE
define HAL_DISABLE_ADC_DRIVER FALSE

define HAL_NO_GCS
define HAL_NO_MONITOR_THREAD

define HAL_DISABLE_LOOP_DELAY

define HAL_USE_RTC FALSE
define DISABLE_SERIAL_ESC_COMM TRUE
define NO_DATAFLASH TRUE

define HAL_NO_RCIN_THREAD

define HAL_BARO_ALLOW_INIT_NO_BARO

define HAL_CAN_DEFAULT_NODE_ID 0


# reserve 256 bytes for comms between app and bootloader
RAM_RESERVE_START 256

env DISABLE_SCRIPTING 1


#undef HAL_OS_FATFS_IO


MAIN_STACK 0x2000
PROCESS_STACK 0x6000

define HAL_CAN_DRIVER_DEFAULT 1

# listen for reboot command from uploader.py script
# undefine to disable. Use -1 to allow on all ports, otherwise serial number index defined in SERIAL_ORDER starting at 0
define HAL_PERIPH_LISTEN_FOR_SERIAL_UART_REBOOT_CMD_PORT 0
 


define CAN_APP_NODE_NAME "org.ardupilot.NucleoH743-periph"











# Now we define the pins that USB is connected on.
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

# These are the pins for SWD debugging with a STlinkv2 or black-magic probe.
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD


# the first CAN bus
PD0 CAN1_RX CAN1
PD1 CAN1_TX CAN1

# This defines the pins for the 2nd CAN interface, if available.
PB6 CAN2_TX CAN2
PB12 CAN2_RX CAN2

# Another USART, this one for telem1. This one has RTS and CTS lines.
# USART2 serial2 telem1
PD5 USART2_TX USART2
PD6 USART2_RX USART2




PB0 GPIO_A_LED OUTPUT LOW
PE1 GPIO_B_LED OUTPUT LOW
PB14 GPIO_C_LED OUTPUT LOW
define HAL_LED_ON 1


define HAL_GPIO_PIN_LED HAL_GPIO_PIN_GPIO_A_LED

PE2 EXTERN_GPIO1 OUTPUT GPIO(1)
PE4 EXTERN_GPIO2 OUTPUT GPIO(2)
PE5 EXTERN_GPIO3 OUTPUT GPIO(3)


# analog in
PA3 ANALOG1 ADC1 SCALE(1)
PC0 ANALOG2 ADC1 SCALE(1)
PC3 ANALOG3 ADC1 SCALE(1)
PB1 ANALOG4 ADC1 SCALE(1)
PC2 ANALOG5 ADC1 SCALE(1)
PF11 ANALOG6 ADC1 SCALE(1)


#PWM-out (can also be used as GPIOs)
PE14 TIM1_CH4 TIM1 PWM(1) GPIO(50)
PE13 TIM1_CH3 TIM1 PWM(2) GPIO(51)
PE11 TIM1_CH2 TIM1 PWM(3) GPIO(52)
PE9  TIM1_CH1 TIM1 PWM(4) GPIO(53)
PD13 TIM4_CH2 TIM4 PWM(5) GPIO(54)
PD14 TIM4_CH3 TIM4 PWM(6) GPIO(55)

